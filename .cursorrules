# Equity Dashboard V1 - Cursor Rules

## Project Context
Personal investment analysis dashboard for Indian companies. Processes Screener.in JSON data, calculates 25+ financial ratios, and visualizes operating cycles through Apple-inspired design with pastel colors.

## Development Methodology: Test-Driven Development (TDD)
**CRITICAL**: All development must follow strict TDD principles:
1. **RED**: Write failing tests first
2. **GREEN**: Write minimal code to pass tests  
3. **REFACTOR**: Clean up while keeping tests passing
4. **NO feature code without corresponding tests**

## Tech Stack
- **Framework**: Next.js 14 (App Router)
- **Database**: Supabase
- **Charts**: Recharts with custom styling
- **Styling**: Tailwind CSS with pastel color palette
- **State**: Zustand
- **Testing**: Jest + React Testing Library + Playwright

## Key Guidelines

### Code Quality
- Maintain >90% test coverage (100% for financial calculations)
- Follow TypeScript strict mode
- Use descriptive variable names
- Add JSDoc comments for complex functions

### Design Principles
- **Phase Colors**: Green (expansion), Red (contraction), Yellow (transition), Gray (stable)
- **Mobile-First**: All components must be responsive
- **Accessibility**: WCAG 2.1 compliance
- **Performance**: <2s load time, <1s chart rendering

### File Structure
```
src/
├── app/                    # Next.js 14 App Router
├── components/             # React components
│   ├── ui/                # Base UI components
│   ├── charts/            # Chart components
│   ├── company/           # Company-specific components
│   └── [feature]/         # Feature-specific components
├── lib/                   # Utilities and calculations
├── services/              # Data layer services
├── stores/                # Zustand stores
├── types/                 # TypeScript types
└── utils/                 # Helper functions
```

### Testing Strategy
- **Unit Tests**: All utilities, calculations, services
- **Component Tests**: UI components with React Testing Library
- **Integration Tests**: Complete workflows with MSW
- **E2E Tests**: Critical user journeys with Playwright

### Task Management
- Follow task list in `PRD tasks/tasks-prd-equity-dashboard-v1.md`
- Work through sub-tasks systematically but only commit after completing entire major task
- Use `./commit-task.sh` for major task commits (1.0, 2.0, 3.0, etc.)
- Update README progress tracking after major task completion
- Mark both major tasks and all sub-tasks as completed in task list

### Financial Calculations
- 100% test coverage required
- Support both regular and finance company variants
- Handle edge cases (division by zero, missing data)
- Validate all calculations against known benchmarks

### Chart Requirements
- Support quarterly (12 quarters) and annual (12 years) views
- Implement colored phase bands for cycle identification
- Smooth animations and hover interactions
- Mobile-optimized touch gestures

### Performance Requirements
- Virtual scrolling for 5000+ companies
- Lazy loading for chart sections
- Web Workers for heavy calculations
- React.memo for expensive components

## Commit Workflow
1. Complete ALL sub-tasks within major task following TDD
2. Run all tests: `npm test`
3. Commit: `./commit-task.sh "X.0" "Major Task description"`
4. Update task list (mark major task and all sub-tasks complete) and README progress
5. Push to GitHub

## Next Major Task
Current focus: Major Task 1.0 - Project Foundation & Design System (complete all sub-tasks 1.1-1.8)

## References
- PRD: `PRDs/prd-equity-dashboard-v1.md`
- Design: `PRDs/prd-equity-dashboard-design-v1.md`
- Tasks: `PRD tasks/tasks-prd-equity-dashboard-v1.md`
- Workflow: `WORKFLOW.md` 